<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Classes on libembeddedhal docs</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/</link><description>Recent content in Classes on libembeddedhal docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sjsu-dev2.github.io/libembeddedhal/api/classes/index.xml" rel="self" type="application/rss+xml"/><item><title>embed::adc</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1adc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1adc/</guid><description>Analog to Digital Converter (ADC) hardware abstraction interface. Use this interface for devices and peripherals that can convert analog voltage signals into a digital number.</description></item><item><title>embed::bit_depth</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1bit__depth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1bit__depth/</guid><description>embed::bit_depth Struct Reference
More&amp;hellip;
#include &amp;lt;full_scale.hpp&amp;gt;
Public Functions Name constexpr bit_depth(T p_value) Public Attributes Name T value Detailed Description template &amp;lt;typename T , size_t bit_width&amp;gt; struct embed::bit_depth; Template Parameters:
T bit_width Public Functions Documentation function bit_depth inline constexpr bit_depth( T p_value ) Public Attributes Documentation variable value T value = 0; Updated on 2021-12-04 at 16:50:11 +0000</description></item><item><title>embed::bit_limits</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1bit__limits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1bit__limits/</guid><description>embed::bit_limits Class Reference
More&amp;hellip;
#include &amp;lt;full_scale.hpp&amp;gt;
Public Functions Name constexpr int_t max()Get the maximum value available for an integer of bit_width size and that can be stored within int_t. The final value of the function depends also on the sign of the int type. constexpr int_t min()Get the minimum value available for an integer of bit_width size and that can be stored within int_t.</description></item><item><title>embed::can</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can/</guid><description>embed::can Class Reference
#include &amp;lt;can.hpp&amp;gt;
Inherits from embed::driver&amp;lt; can_settings &amp;gt;
Public Classes Name struct message_t Public Types Name using uint32_t id_t Public Functions Name virtual void send(const message_t &amp;amp; p_message) =0 virtual message_t receive() =0 virtual bool has_data() =0 virtual void attach_interrupt(std::function&amp;lt; void(can &amp;amp;)&amp;gt; p_receive_handler) =0Will attach an interrupt to this can driver such that, when a message is received, it will call the handler supplied.</description></item><item><title>embed::can::message_t</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1can_1_1message__t/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1can_1_1message__t/</guid><description>embed::can::message_t Struct Reference
#include &amp;lt;can.hpp&amp;gt;
Public Attributes Name id_t id uint8_t length std::array&amp;lt; uint8_t, 8 &amp;gt; payload bool is_remote_request Public Attributes Documentation variable id id_t id; variable length uint8_t length = 0; variable payload std::array&amp;lt; uint8_t, 8 &amp;gt; payload {0}; variable is_remote_request bool is_remote_request = false; Updated on 2021-12-04 at 16:50:11 +0000</description></item><item><title>embed::can_network</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can__network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can__network/</guid><description>can_network is a canbus message receiver handler and</description></item><item><title>embed::can_network::node_t</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can__network_1_1node__t/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1can__network_1_1node__t/</guid><description>embed::can_network::node_t Class Reference
More&amp;hellip;
#include &amp;lt;can_network.hpp&amp;gt;
Public Functions Name node_t()Default constructor. node_t &amp;amp; operator=(const node_t &amp;amp; node)Node assignment operator. node_t(const node_t &amp;amp; node)Copy constructor. can::message_t secure_get() Detailed Description class embed::can_network::node_t; The node stored in the can_network map. Holds the latest CAN message and contains methods for updating and retreiving can messages in a thread-safe manner that does not invoke OS locks.</description></item><item><title>embed::can_settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1can__settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1can__settings/</guid><description>embed::can_settings Struct Reference
#include &amp;lt;can.hpp&amp;gt;
Public Attributes Name uint32_t clock_rate_hz Public Attributes Documentation variable clock_rate_hz uint32_t clock_rate_hz = 100&amp;#39;000; Updated on 2021-12-04 at 16:50:11 +0000</description></item><item><title>embed::counter</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1counter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1counter/</guid><description>Counter hardware abstraction interface. Use this interface for devices and peripherals that have counting capabilities. Such devices can count up or down. Useful for keeping time. Expect counters to overflow when they reach the end of counting register&amp;rsquo;s limits.</description></item><item><title>embed::dac</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1dac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1dac/</guid><description>Digital to Analog Converter (DAC) hardware abstraction interface. Use this interface for devices and peripherals that can create arbitrary analog voltages between a defined LOW and HIGH voltage.</description></item><item><title>embed::driver</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1driver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1driver/</guid><description>The basis class for all peripheral, device and system drivers in libembeddedhal.</description></item><item><title>embed::full_scale</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1full__scale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1full__scale/</guid><description>embed::full_scale Class Reference
More&amp;hellip;
#include &amp;lt;full_scale.hpp&amp;gt;
Public Functions Name constexpr full_scale() template &amp;lt;typename U ,size_t bit_width&amp;gt; constexpr full_scale(bit_depth&amp;lt; U, bit_width &amp;gt; p_value) template &amp;lt;typename U ,size_t bit_width&amp;gt; constexpr full_scale&amp;lt; T &amp;gt; &amp;amp; operator=(bit_depth&amp;lt; U, bit_width &amp;gt; p_value) T value() Public Attributes Name constexpr size_t bit_width Calculate the number.</description></item><item><title>embed::i2c</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1i2c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1i2c/</guid><description>Inter-integrated Circuit (I2C) or Two Wire Interface (TWI) communication protocol hardware abstract interface.</description></item><item><title>embed::i2c_settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1i2c__settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1i2c__settings/</guid><description>Generic settings for a standard I2C device.</description></item><item><title>embed::input_pin</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1input__pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1input__pin/</guid><description>Digital input pin hardware abstraction. Use this to read a pin and determine if the voltage on it is HIGH or LOW.</description></item><item><title>embed::input_pin_settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1input__pin__settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1input__pin__settings/</guid><description>Generic settings for input pins.</description></item><item><title>embed::interrupt_pin</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1interrupt__pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1interrupt__pin/</guid><description>Digital interrupt pin hardware abstraction. Use this to trigger an interrupt service routine (ISR) when a pin detects a falling edge (when the pin&amp;rsquo;s voltage transitions from HIGH to LOW), a rising edge (when the pin&amp;rsquo;s voltage transitions from LOW to HIGH), or any transition of state on the pin.</description></item><item><title>embed::interrupt_pin_settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1interrupt__pin__settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1interrupt__pin__settings/</guid><description>Generic settings for interrupt pins.</description></item><item><title>embed::invalid_option_t</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1invalid__option__t/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1invalid__option__t/</guid><description>Used for defining static_asserts that should always fail, but only if the static_assert line is hit via if constexpr control block. Prefer to NOT use this directly but to use invalid_option instead.</description></item><item><title>embed::no_settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1no__settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1no__settings/</guid><description>An empty settings structure used to indicate that a driver or interface does not have generic settings.</description></item><item><title>embed::output_pin</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1output__pin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1output__pin/</guid><description>Digital output pin hardware abstraction. Use this to drive a pin HIGH or LOW in order to send a control signal or turn off or on an LED.</description></item><item><title>embed::output_pin_settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1output__pin__settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1output__pin__settings/</guid><description>Generic settings for output pins.</description></item><item><title>embed::pwm</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1pwm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1pwm/</guid><description>Pulse Width Modulation (PWM) channel hardware abstraction.</description></item><item><title>embed::serial</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1serial/</guid><description>Serial communication protocol hardware abstract interface. Use this interface for hardware that implements a serial protocol like UART, USART, RS232, RS485 and many others that use a similar communication protocol but may use different voltage schemes.</description></item><item><title>embed::serial_settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial__settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1serial__settings/</guid><description>Generic settings for a standard serial device.</description></item><item><title>embed::spi</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1spi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1spi/</guid><description>Serial peripheral interface (SPI) communication protocol hardware abstract interface.</description></item><item><title>embed::spi_settings</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1spi__settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1spi__settings/</guid><description>Generic settings for a standard SPI device.</description></item><item><title>embed::static_callable</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__callable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__callable/</guid><description>General class which will be used to allow for signature to be used and then split by the below class.</description></item><item><title>embed::static_callable&lt; owner_class, reference_designator, return_t(args_t...)></title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__callable_3_01owner__class_00_01reference__designator_00_01return__t_07args__t_8_8_8_08_4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__callable_3_01owner__class_00_01reference__designator_00_01return__t_07args__t_8_8_8_08_4/</guid><description>Specialization of static_callable with the return type and arguments split up.</description></item><item><title>embed::static_memory_resource</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__memory__resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1static__memory__resource/</guid><description>The static_memory_resource is the polymorphic memory resource allocator that allows libembeddedhal&amp;rsquo;s libraries to use a C++ standard container such as std::pmr::vector, std::pmr::string, std::pmr::unordered_map, and more without requiring dynamic memory allocation from the heap. It provides a simple way to create an allocator with built in storage, with its size indicated by a single template parameter. It also provides statistics regarding the amount of memory allocated such that developers can determine if they need to reduce or increase the size of the buffer. Memory statistics can also give programs the insight into how much memory space is available and make decisions based on that. In the event that the memory of the static allocator is exceeded, a std::bad_alloc excpetion is thrown.</description></item><item><title>embed::this_thread::global_clocks</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1this__thread_1_1global__clocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/structembed_1_1this__thread_1_1global__clocks/</guid><description>internal clock</description></item><item><title>embed::timer</title><link>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1timer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sjsu-dev2.github.io/libembeddedhal/api/classes/classembed_1_1timer/</guid><description>Timer hardware abstraction interface. Use this interface for devices and peripherals that have timer like capabilities, such that, when a timer&amp;rsquo;s time has expired, an event/interrupt/signal is generated.</description></item></channel></rss>