<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="static__memory__resource_8hpp" kind="file" language="C++">
    <compoundname>static_memory_resource.hpp</compoundname>
    <includes local="no">cstddef</includes>
    <includes local="no">memory_resource</includes>
    <incdepgraph>
      <node id="3">
        <label>memory_resource</label>
      </node>
      <node id="2">
        <label>cstddef</label>
      </node>
      <node id="1">
        <label>/github/workspace/include/libembeddedhal/static_memory_resource.hpp</label>
        <link refid="static__memory__resource_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classembed_1_1static__memory__resource" prot="public">embed::static_memory_resource</innerclass>
    <innernamespace refid="namespaceembed">embed</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory_resource&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceembed" kindref="compound">embed</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BufferSize&gt;</highlight></codeline>
<codeline lineno="31" refid="classembed_1_1static__memory__resource" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classembed_1_1static__memory__resource" kindref="compound">static_memory_resource</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::pmr::memory_resource</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34" refid="classembed_1_1static__memory__resource_1accc5d3c63b39f659edf8fc3cd068f6a8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classembed_1_1static__memory__resource_1accc5d3c63b39f659edf8fc3cd068f6a8" kindref="member">static_memory_resource</ref>()</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_buffer{}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_unallocated_memory(m_buffer.data())</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_resource(m_buffer.data(),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_buffer.size(),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pmr::null_memory_resource())</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="45" refid="classembed_1_1static__memory__resource_1a8f950ea93be16b35e1930543313c3025" refkind="member"><highlight class="normal"><sp/><sp/>constexpr<sp/>std::size_t<sp/><ref refid="classembed_1_1static__memory__resource_1a8f950ea93be16b35e1930543313c3025" kindref="member">capacity</ref>()<sp/>noexcept</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BufferSize;<sp/>}</highlight></codeline>
<codeline lineno="49" refid="classembed_1_1static__memory__resource_1a8a2645e3abfaaa0d8e7c53b8ebe1dceb" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classembed_1_1static__memory__resource_1a8a2645e3abfaaa0d8e7c53b8ebe1dceb" kindref="member">memory_used</ref>()<sp/>noexcept</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="50"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_unallocated_memory<sp/>-<sp/>m_buffer.data();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56" refid="classembed_1_1static__memory__resource_1aa14999eb854014176cded0f4bc406a4c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1static__memory__resource_1aa14999eb854014176cded0f4bc406a4c" kindref="member">memory_available</ref>()<sp/>noexcept</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1static__memory__resource_1a8f950ea93be16b35e1930543313c3025" kindref="member">capacity</ref>()<sp/>-<sp/><ref refid="classembed_1_1static__memory__resource_1a8a2645e3abfaaa0d8e7c53b8ebe1dceb" kindref="member">memory_used</ref>();<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67" refid="classembed_1_1static__memory__resource_1aa8338b0fd0c40352b002a8bf6ce37000" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classembed_1_1static__memory__resource_1aa8338b0fd0c40352b002a8bf6ce37000" kindref="member">do_allocate</ref>(std::size_t<sp/>bytes,<sp/>std::size_t<sp/>alignment)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="68"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>a<sp/>pointer<sp/>to<sp/>unallocated<sp/>memory<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>monotonic_m_bufferresource<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>allocated_address<sp/>=<sp/>m_resource.allocate(bytes,<sp/>alignment);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>above<sp/>call<sp/>has<sp/>not<sp/>thrown<sp/>a<sp/>std::bad_alloc<sp/>exception,<sp/>then<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocated<sp/>address<sp/>must<sp/>contain<sp/>a<sp/>valid<sp/>address<sp/>from<sp/>buffer.<sp/>To<sp/>get<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>location<sp/>of<sp/>the<sp/>unallocated<sp/>memory,<sp/>simply<sp/>add<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate_address<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>m_unallocated_memory<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::byte*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(allocated_address)<sp/>+<sp/>bytes;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocated_address;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89" refid="classembed_1_1static__memory__resource_1a95886425ea5d45ec20ecf5f5468ffd72" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1static__memory__resource_1a95886425ea5d45ec20ecf5f5468ffd72" kindref="member">do_deallocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>address,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>bytes,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>alignment)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="92"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_resource.deallocate(address,<sp/>bytes,<sp/>alignment);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103" refid="classembed_1_1static__memory__resource_1a730601f3a9b7aaa3265ce7421e599291" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1static__memory__resource_1a730601f3a9b7aaa3265ce7421e599291" kindref="member">do_is_equal</ref>(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pmr::memory_resource&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_resource.is_equal(other);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::array&lt;std::byte,<sp/>BufferSize&gt;<sp/>m_buffer;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>std::byte*<sp/>m_unallocated_memory;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>std::pmr::monotonic_buffer_resource<sp/>m_resource;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>embed</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/github/workspace/include/libembeddedhal/static_memory_resource.hpp"/>
  </compounddef>
</doxygen>
