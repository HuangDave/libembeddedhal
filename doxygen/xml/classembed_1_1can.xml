<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classembed_1_1can" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>embed::can</compoundname>
    <basecompoundref refid="classembed_1_1driver" prot="public" virt="non-virtual">embed::driver&lt; can_settings &gt;</basecompoundref>
    <includes refid="can_8hpp" local="no">can.hpp</includes>
    <innerclass refid="structembed_1_1can_1_1message__t" prot="public">embed::can::message_t</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classembed_1_1can_1a526ae12b76dffd3dda0891247da12b55" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using embed::can::id_t =  uint32_t</definition>
        <argsstring></argsstring>
        <name>id_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/can/can.hpp" line="20" column="3" bodyfile="/github/workspace/include/libembeddedhal/can/can.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classembed_1_1can_1a60e009b5ebdf8bb922b88f080d00a37f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void embed::can::send</definition>
        <argsstring>(const message_t &amp;p_message)=0</argsstring>
        <name>send</name>
        <param>
          <type>const <ref refid="structembed_1_1can_1_1message__t" kindref="compound">message_t</ref> &amp;</type>
          <declname>p_message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/can/can.hpp" line="30" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1can_1a60b406a9a7689761e6481f451a1bc277" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structembed_1_1can_1_1message__t" kindref="compound">message_t</ref></type>
        <definition>virtual message_t embed::can::receive</definition>
        <argsstring>()=0</argsstring>
        <name>receive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/can/can.hpp" line="31" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1can_1a253e7c87a6a5438adefc991a861232b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool embed::can::has_data</definition>
        <argsstring>()=0</argsstring>
        <name>has_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/can/can.hpp" line="32" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1can_1a996fd4b52acd90ef05b5972c3e2a3fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void embed::can::attach_interrupt</definition>
        <argsstring>(std::function&lt; void(can &amp;)&gt; p_receive_handler)=0</argsstring>
        <name>attach_interrupt</name>
        <param>
          <type>std::function&lt; void(<ref refid="classembed_1_1can" kindref="compound">can</ref> &amp;)&gt;</type>
          <declname>p_receive_handler</declname>
        </param>
        <briefdescription>
<para>Will attach an interrupt to this can driver such that, when a message is received, it will call the handler supplied. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_receive_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>- Handler to be called when a message is received. If this is set to nullptr, then this function shall disable the can interrupt or replace the interrupt with a function that does nothing, but still clears the interrupt service routine. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/can/can.hpp" line="43" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>embed::can</label>
        <link refid="classembed_1_1can"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>embed::driver&lt; can_settings &gt;</label>
        <link refid="classembed_1_1driver"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>embed::can</label>
        <link refid="classembed_1_1can"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>embed::driver&lt; can_settings &gt;</label>
        <link refid="classembed_1_1driver"/>
      </node>
    </collaborationgraph>
    <location file="/github/workspace/include/libembeddedhal/can/can.hpp" line="16" column="1" bodyfile="/github/workspace/include/libembeddedhal/can/can.hpp" bodystart="17" bodyend="45"/>
    <listofallmembers>
      <member refid="classembed_1_1can_1a996fd4b52acd90ef05b5972c3e2a3fff" prot="public" virt="pure-virtual"><scope>embed::can</scope><name>attach_interrupt</name></member>
      <member refid="classembed_1_1driver_1a1677362481d10c3b48544359daadf081" prot="protected" virt="pure-virtual"><scope>embed::can</scope><name>driver_initialize</name></member>
      <member refid="classembed_1_1can_1a253e7c87a6a5438adefc991a861232b2" prot="public" virt="pure-virtual"><scope>embed::can</scope><name>has_data</name></member>
      <member refid="classembed_1_1can_1a526ae12b76dffd3dda0891247da12b55" prot="public" virt="non-virtual"><scope>embed::can</scope><name>id_t</name></member>
      <member refid="classembed_1_1driver_1a947a3487fa3acd0879e83872d9c97b01" prot="public" virt="non-virtual"><scope>embed::can</scope><name>initialize</name></member>
      <member refid="classembed_1_1driver_1a7e13fe8999142475da8c5b84927f03aa" prot="public" virt="non-virtual"><scope>embed::can</scope><name>initialized_settings</name></member>
      <member refid="classembed_1_1driver_1a346f472e8c212d09c8f45aebd0089d7b" prot="public" virt="non-virtual"><scope>embed::can</scope><name>is_initialized</name></member>
      <member refid="classembed_1_1driver_1ab8b2029f33d55b9ffffd6e88d846cd7b" prot="protected" virt="non-virtual"><scope>embed::can</scope><name>m_initialized</name></member>
      <member refid="classembed_1_1driver_1aac7d23e384bc27a26b77c8fd681483ef" prot="protected" virt="non-virtual"><scope>embed::can</scope><name>m_initialized_settings</name></member>
      <member refid="classembed_1_1driver_1afb925433a5897293609af5fae29e3dc3" prot="protected" virt="non-virtual"><scope>embed::can</scope><name>m_settings</name></member>
      <member refid="classembed_1_1can_1a60b406a9a7689761e6481f451a1bc277" prot="public" virt="pure-virtual"><scope>embed::can</scope><name>receive</name></member>
      <member refid="classembed_1_1driver_1a54440bf23c0c34102f563da1193d99ae" prot="public" virt="non-virtual"><scope>embed::can</scope><name>reset</name></member>
      <member refid="classembed_1_1can_1a60e009b5ebdf8bb922b88f080d00a37f" prot="public" virt="pure-virtual"><scope>embed::can</scope><name>send</name></member>
      <member refid="classembed_1_1driver_1ae6eb991ebb2321bb3565c2a03a613219" prot="public" virt="non-virtual"><scope>embed::can</scope><name>settings</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
