<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classembed_1_1timer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>embed::timer</compoundname>
    <basecompoundref refid="classembed_1_1driver" prot="public" virt="non-virtual">embed::driver&lt;&gt;</basecompoundref>
    <includes refid="timer_8hpp" local="no">timer.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classembed_1_1timer_1ae5ee3e39d88160bbeefa7fcaa1d50c18" prot="public" static="no" strong="yes">
        <type></type>
        <name>controls</name>
        <enumvalue id="classembed_1_1timer_1ae5ee3e39d88160bbeefa7fcaa1d50c18aea2b2676c28c0db26d39331a336c6b92" prot="public">
          <name>start</name>
          <briefdescription>
<para>Control value to start the timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classembed_1_1timer_1ae5ee3e39d88160bbeefa7fcaa1d50c18aef399b2d446bb37b7c32ad2cc1b6045b" prot="public">
          <name>stop</name>
          <briefdescription>
<para>Control value to stop a timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classembed_1_1timer_1ae5ee3e39d88160bbeefa7fcaa1d50c18a86266ee937d97f812a8e57d22b62ee29" prot="public">
          <name>reset</name>
          <briefdescription>
<para>Control value to reset a timer. The timer shall remain in a running or stopped state after this call. So an ongoing timer will continue to count but will have its counter reset to zero if this control is used. If a timer is stopped, then it shall be reset to zero, and stay stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Set of controls for a timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/timer/timer.hpp" line="25" column="3" bodyfile="/github/workspace/include/libembeddedhal/timer/timer.hpp" bodystart="26" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="classembed_1_1timer_1ad3837ad993cdc37231c434faa95112c1" prot="public" static="no" strong="yes">
        <type></type>
        <name>type</name>
        <enumvalue id="classembed_1_1timer_1ad3837ad993cdc37231c434faa95112c1a3d9c0b6e0b8c31d44e2d378d9632f00a" prot="public">
          <name>oneshot</name>
          <briefdescription>
<para>Once the timer&apos;s time has been reached an interrupt will fire and the timer will be stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classembed_1_1timer_1ad3837ad993cdc37231c434faa95112c1ad2884efee751eb4746b685827c7efcd9" prot="public">
          <name>continuous</name>
          <briefdescription>
<para>Once the timer&apos;s time has been reached an interrupt will fire and the timer will be reset and will begin counting again. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/timer/timer.hpp" line="52" column="3" bodyfile="/github/workspace/include/libembeddedhal/timer/timer.hpp" bodystart="53" bodyend="66"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classembed_1_1timer_1a90722bb4cbaa45305acf97af43d4c3ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool embed::timer::is_running</definition>
        <argsstring>()=0</argsstring>
        <name>is_running</name>
        <briefdescription>
<para>Determine if the timer is currently running. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true timer is currently running </para>
</simplesect>
<simplesect kind="return"><para>false timer is currently stopped </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/timer/timer.hpp" line="74" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1timer_1af4ff388c97d49044000b5f3b873a87e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void embed::timer::control</definition>
        <argsstring>(controls p_control)=0</argsstring>
        <name>control</name>
        <param>
          <type><ref refid="classembed_1_1timer_1ae5ee3e39d88160bbeefa7fcaa1d50c18" kindref="member">controls</ref></type>
          <declname>p_control</declname>
        </param>
        <briefdescription>
<para>Control the state of the timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_control</parametername>
</parameternamelist>
<parameterdescription>
<para>new state for the timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/timer/timer.hpp" line="80" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1timer_1a125765b1ec176884510a756619b37a07" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool embed::timer::attach_interrupt</definition>
        <argsstring>(std::function&lt; void(void)&gt; p_callback, std::chrono::nanoseconds interval, type p_type=type::continuous)=0</argsstring>
        <name>attach_interrupt</name>
        <param>
          <type>std::function&lt; void(void)&gt;</type>
          <declname>p_callback</declname>
        </param>
        <param>
          <type>std::chrono::nanoseconds</type>
          <declname>interval</declname>
        </param>
        <param>
          <type><ref refid="classembed_1_1timer_1ad3837ad993cdc37231c434faa95112c1" kindref="member">type</ref></type>
          <declname>p_type</declname>
          <defval><ref refid="classembed_1_1timer_1ad3837ad993cdc37231c434faa95112c1ad2884efee751eb4746b685827c7efcd9" kindref="member">type::continuous</ref></defval>
        </param>
        <briefdescription>
<para>Setup the timer and attach an interrupt to it. </para>
        </briefdescription>
        <detaileddescription>
<para>When called this will, stop and reset the timer. To start the timer, <computeroutput>control(controls::start)</computeroutput> must be called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function to be called when the timer expires </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interval</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of time before the timer expires </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of timer this is </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true successfully set all parameters </para>
</simplesect>
<simplesect kind="return"><para>false not all parameters could be met such as an interval smaller than is capable by hardware or an unsupported timer type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/timer/timer.hpp" line="94" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Timer hardware abstraction interface. Use this interface for devices and peripherals that have timer like capabilities, such that, when a timer&apos;s time has expired, an event/interrupt/signal is generated. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>embed::driver&lt; settings_t &gt;</label>
        <link refid="classembed_1_1driver"/>
      </node>
      <node id="1">
        <label>embed::timer</label>
        <link refid="classembed_1_1timer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>embed::driver&lt; settings_t &gt;</label>
        <link refid="classembed_1_1driver"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_initialized_settings</edgelabel>
          <edgelabel>m_settings</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>embed::no_settings</label>
        <link refid="structembed_1_1no__settings"/>
      </node>
      <node id="1">
        <label>embed::timer</label>
        <link refid="classembed_1_1timer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/github/workspace/include/libembeddedhal/timer/timer.hpp" line="18" column="1" bodyfile="/github/workspace/include/libembeddedhal/timer/timer.hpp" bodystart="19" bodyend="97"/>
    <listofallmembers>
      <member refid="classembed_1_1timer_1a125765b1ec176884510a756619b37a07" prot="public" virt="pure-virtual"><scope>embed::timer</scope><name>attach_interrupt</name></member>
      <member refid="classembed_1_1timer_1af4ff388c97d49044000b5f3b873a87e3" prot="public" virt="pure-virtual"><scope>embed::timer</scope><name>control</name></member>
      <member refid="classembed_1_1timer_1ae5ee3e39d88160bbeefa7fcaa1d50c18" prot="public" virt="non-virtual"><scope>embed::timer</scope><name>controls</name></member>
      <member refid="classembed_1_1driver_1a1677362481d10c3b48544359daadf081" prot="protected" virt="pure-virtual"><scope>embed::timer</scope><name>driver_initialize</name></member>
      <member refid="classembed_1_1driver_1a947a3487fa3acd0879e83872d9c97b01" prot="public" virt="non-virtual"><scope>embed::timer</scope><name>initialize</name></member>
      <member refid="classembed_1_1driver_1a7e13fe8999142475da8c5b84927f03aa" prot="public" virt="non-virtual"><scope>embed::timer</scope><name>initialized_settings</name></member>
      <member refid="classembed_1_1driver_1a346f472e8c212d09c8f45aebd0089d7b" prot="public" virt="non-virtual"><scope>embed::timer</scope><name>is_initialized</name></member>
      <member refid="classembed_1_1timer_1a90722bb4cbaa45305acf97af43d4c3ca" prot="public" virt="pure-virtual"><scope>embed::timer</scope><name>is_running</name></member>
      <member refid="classembed_1_1driver_1ab8b2029f33d55b9ffffd6e88d846cd7b" prot="protected" virt="non-virtual"><scope>embed::timer</scope><name>m_initialized</name></member>
      <member refid="classembed_1_1driver_1aac7d23e384bc27a26b77c8fd681483ef" prot="protected" virt="non-virtual"><scope>embed::timer</scope><name>m_initialized_settings</name></member>
      <member refid="classembed_1_1driver_1afb925433a5897293609af5fae29e3dc3" prot="protected" virt="non-virtual"><scope>embed::timer</scope><name>m_settings</name></member>
      <member refid="classembed_1_1driver_1a54440bf23c0c34102f563da1193d99ae" prot="public" virt="non-virtual"><scope>embed::timer</scope><name>reset</name></member>
      <member refid="classembed_1_1driver_1ae6eb991ebb2321bb3565c2a03a613219" prot="public" virt="non-virtual"><scope>embed::timer</scope><name>settings</name></member>
      <member refid="classembed_1_1timer_1ad3837ad993cdc37231c434faa95112c1" prot="public" virt="non-virtual"><scope>embed::timer</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
