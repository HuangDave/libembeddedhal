<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classembed_1_1driver" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>embed::driver</compoundname>
    <derivedcompoundref refid="classembed_1_1adc" prot="public" virt="non-virtual">embed::adc</derivedcompoundref>
    <derivedcompoundref refid="classembed_1_1can__network" prot="public" virt="non-virtual">embed::can_network</derivedcompoundref>
    <derivedcompoundref refid="classembed_1_1counter" prot="public" virt="non-virtual">embed::counter</derivedcompoundref>
    <derivedcompoundref refid="classembed_1_1dac" prot="public" virt="non-virtual">embed::dac</derivedcompoundref>
    <derivedcompoundref refid="classembed_1_1pwm" prot="public" virt="non-virtual">embed::pwm</derivedcompoundref>
    <derivedcompoundref refid="classembed_1_1timer" prot="public" virt="non-virtual">embed::timer</derivedcompoundref>
    <includes refid="driver_8hpp" local="no">driver.hpp</includes>
    <templateparamlist>
      <param>
        <type>class settings_t</type>
        <defval><ref refid="structembed_1_1no__settings" kindref="compound">no_settings</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classembed_1_1driver_1afb925433a5897293609af5fae29e3dc3" prot="protected" static="no" mutable="no">
        <type>settings_t</type>
        <definition>settings_t embed::driver&lt; settings_t &gt;::m_settings</definition>
        <argsstring></argsstring>
        <name>m_settings</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="114" column="14" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classembed_1_1driver_1aac7d23e384bc27a26b77c8fd681483ef" prot="protected" static="no" mutable="no">
        <type>settings_t</type>
        <definition>settings_t embed::driver&lt; settings_t &gt;::m_initialized_settings</definition>
        <argsstring></argsstring>
        <name>m_initialized_settings</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="115" column="14" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classembed_1_1driver_1ab8b2029f33d55b9ffffd6e88d846cd7b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool embed::driver&lt; settings_t &gt;::m_initialized</definition>
        <argsstring></argsstring>
        <name>m_initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="116" column="8" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classembed_1_1driver_1a947a3487fa3acd0879e83872d9c97b01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool embed::driver&lt; settings_t &gt;::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
<para>Initialize the driver, apply the setting as defined in the settings_t structure and enable it. Calling this function after it has already been initialized will return false. In order to run initialization again, <ref refid="classembed_1_1driver_1a54440bf23c0c34102f563da1193d99ae" kindref="member">reset()</ref> must be called. After initialization, the settings are committed and saved into another settings structure. This settings can be looked up and inspected by the application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true - initialization of the driver was successful </para>
</simplesect>
<simplesect kind="return"><para>false - initialization of the driver failed. See the error() function for details about exactly what failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="60" column="9" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="60" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1driver_1a54440bf23c0c34102f563da1193d99ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void embed::driver&lt; settings_t &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reset the driver in order to run initialize again. This is helpful if the application needs to change the settings of a driver after it is first initialized, like baud rate for serial or pull resistor for a pin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="81" column="8" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1driver_1a346f472e8c212d09c8f45aebd0089d7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool embed::driver&lt; settings_t &gt;::is_initialized</definition>
        <argsstring>() const</argsstring>
        <name>is_initialized</name>
        <briefdescription>
<para>Determine if the driver has been initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true the driver is initialized </para>
</simplesect>
<simplesect kind="return"><para>false the driver has not been initialized or has been reset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="88" column="9" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1driver_1ae6eb991ebb2321bb3565c2a03a613219" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>settings_t &amp;</type>
        <definition>settings_t&amp; embed::driver&lt; settings_t &gt;::settings</definition>
        <argsstring>()</argsstring>
        <name>settings</name>
        <briefdescription>
<para>Get access to uncommitted driver settings. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>settings_t&amp; reference to the uncommitted driver settings. When initialize runs successful, the uncommitted settings will be saved to the initialize_settings(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="96" column="15" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1driver_1a7e13fe8999142475da8c5b84927f03aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const settings_t &amp;</type>
        <definition>const settings_t&amp; embed::driver&lt; settings_t &gt;::initialized_settings</definition>
        <argsstring>() const</argsstring>
        <name>initialized_settings</name>
        <briefdescription>
<para>Get access to the settings that were used in the latest initialization. These settings only get updated when a successful <ref refid="classembed_1_1driver_1a947a3487fa3acd0879e83872d9c97b01" kindref="member">initialize()</ref> has occurred. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const settings_t&amp; the current settings of the driver if it is initialized. If the driver is not initialized, then the contents of this structure should be ignored as they may not represent the current of the driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="107" column="21" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="107" bodyend="110"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classembed_1_1driver_1a1677362481d10c3b48544359daadf081" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool embed::driver&lt; settings_t &gt;::driver_initialize</definition>
        <argsstring>()=0</argsstring>
        <name>driver_initialize</name>
        <reimplementedby refid="classembed_1_1can__network_1a252f3734fb6b491f71285e998f73ddd9">driver_initialize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="113" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The basis class for all peripheral, device and system drivers in libembeddedhal. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>settings_t</parametername>
</parameternamelist>
<parameterdescription>
<para>generic settings for the driver. For example, generic settings for a uart driver would have baud rate, stop bits and parity. This is expected of all UART devices and as such is part of the systems API. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>embed::driver&lt; settings_t &gt;</label>
        <link refid="classembed_1_1driver"/>
      </node>
      <node id="4">
        <label>embed::counter&lt;&gt;</label>
        <link refid="classembed_1_1counter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>embed::dac&lt;&gt;</label>
        <link refid="classembed_1_1dac"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>embed::timer&lt;&gt;</label>
        <link refid="classembed_1_1timer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>embed::pwm&lt;&gt;</label>
        <link refid="classembed_1_1pwm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>embed::can_network&lt;&gt;</label>
        <link refid="classembed_1_1can__network"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>embed::adc&lt;&gt;</label>
        <link refid="classembed_1_1adc"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>embed::driver&lt; settings_t &gt;</label>
        <link refid="classembed_1_1driver"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_initialized_settings</edgelabel>
          <edgelabel>m_settings</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>embed::no_settings</label>
        <link refid="structembed_1_1no__settings"/>
      </node>
    </collaborationgraph>
    <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="45" column="1" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="46" bodyend="117"/>
    <listofallmembers>
      <member refid="classembed_1_1driver_1a1677362481d10c3b48544359daadf081" prot="protected" virt="pure-virtual"><scope>embed::driver</scope><name>driver_initialize</name></member>
      <member refid="classembed_1_1driver_1a947a3487fa3acd0879e83872d9c97b01" prot="public" virt="non-virtual"><scope>embed::driver</scope><name>initialize</name></member>
      <member refid="classembed_1_1driver_1a7e13fe8999142475da8c5b84927f03aa" prot="public" virt="non-virtual"><scope>embed::driver</scope><name>initialized_settings</name></member>
      <member refid="classembed_1_1driver_1a346f472e8c212d09c8f45aebd0089d7b" prot="public" virt="non-virtual"><scope>embed::driver</scope><name>is_initialized</name></member>
      <member refid="classembed_1_1driver_1ab8b2029f33d55b9ffffd6e88d846cd7b" prot="protected" virt="non-virtual"><scope>embed::driver</scope><name>m_initialized</name></member>
      <member refid="classembed_1_1driver_1aac7d23e384bc27a26b77c8fd681483ef" prot="protected" virt="non-virtual"><scope>embed::driver</scope><name>m_initialized_settings</name></member>
      <member refid="classembed_1_1driver_1afb925433a5897293609af5fae29e3dc3" prot="protected" virt="non-virtual"><scope>embed::driver</scope><name>m_settings</name></member>
      <member refid="classembed_1_1driver_1a54440bf23c0c34102f563da1193d99ae" prot="public" virt="non-virtual"><scope>embed::driver</scope><name>reset</name></member>
      <member refid="classembed_1_1driver_1ae6eb991ebb2321bb3565c2a03a613219" prot="public" virt="non-virtual"><scope>embed::driver</scope><name>settings</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
