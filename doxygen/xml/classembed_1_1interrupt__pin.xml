<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classembed_1_1interrupt__pin" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>embed::interrupt_pin</compoundname>
    <basecompoundref refid="classembed_1_1driver" prot="public" virt="non-virtual">embed::driver&lt; interrupt_pin_settings &gt;</basecompoundref>
    <includes refid="gpio_8hpp" local="no">gpio.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classembed_1_1interrupt__pin_1a07c33ec3b21b40346a0b765bb14627e9" prot="public" static="no" strong="yes">
        <type></type>
        <name>trigger_edge</name>
        <enumvalue id="classembed_1_1interrupt__pin_1a07c33ec3b21b40346a0b765bb14627e9a465223d16534b847faf7b88e6cd17139" prot="public">
          <name>falling</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Trigger and interrupt when a pin transitions from HIGH voltage to LOW voltage. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classembed_1_1interrupt__pin_1a07c33ec3b21b40346a0b765bb14627e9a637aa1a3f3fe939460e3e6126a3cb76a" prot="public">
          <name>rising</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Trigger and interrupt when a pin transitions from LOW voltage to HIGH voltage. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classembed_1_1interrupt__pin_1a07c33ec3b21b40346a0b765bb14627e9af6cb3e816496528d4187db53bc66567f" prot="public">
          <name>both</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Trigger and interrupt when a pin transitions it state. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The condition in which an interrupt is triggered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" line="145" column="3" bodyfile="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" bodystart="146" bodyend="164"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classembed_1_1interrupt__pin_1aeef4d6b6450cf1f2ed86242668343674" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool embed::interrupt_pin::level</definition>
        <argsstring>() const =0</argsstring>
        <name>level</name>
        <briefdescription>
<para>Return the voltage level of the pin. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true HIGH voltage </para>
</simplesect>
<simplesect kind="return"><para>false LOW voltage </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" line="171" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1interrupt__pin_1a112a6dbbb7aa4bbbf8e1f92e41b4fce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void embed::interrupt_pin::attach_interrupt</definition>
        <argsstring>(std::function&lt; void(void)&gt; p_callback, trigger_edge p_trigger)=0</argsstring>
        <name>attach_interrupt</name>
        <param>
          <type>std::function&lt; void(void)&gt;</type>
          <declname>p_callback</declname>
        </param>
        <param>
          <type><ref refid="classembed_1_1interrupt__pin_1a07c33ec3b21b40346a0b765bb14627e9" kindref="member">trigger_edge</ref></type>
          <declname>p_trigger</declname>
        </param>
        <briefdescription>
<para>Enable interrupts for this pin. Pass in the callback to be executed when the trigger condition is met. This function can be called multiple times if the callback or trigger conditions need to be changed. detach_interrupts() does not need to be called before re-running this function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>function to execute when the trigger condition is met </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>the trigger condition that will signal the system to run the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" line="183" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1interrupt__pin_1a4777e9de3417b01250bdfd1c7f96233b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void embed::interrupt_pin::detach_interrupt</definition>
        <argsstring>()=0</argsstring>
        <name>detach_interrupt</name>
        <briefdescription>
<para>Disable interrupts for this pin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" line="189" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Digital interrupt pin hardware abstraction. Use this to trigger an interrupt service routine (ISR) when a pin detects a falling edge (when the pin&apos;s voltage transitions from HIGH to LOW), a rising edge (when the pin&apos;s voltage transitions from LOW to HIGH), or any transition of state on the pin. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>embed::interrupt_pin</label>
        <link refid="classembed_1_1interrupt__pin"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>embed::driver&lt; interrupt_pin_settings &gt;</label>
        <link refid="classembed_1_1driver"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>embed::interrupt_pin</label>
        <link refid="classembed_1_1interrupt__pin"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>embed::driver&lt; interrupt_pin_settings &gt;</label>
        <link refid="classembed_1_1driver"/>
      </node>
    </collaborationgraph>
    <location file="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" line="138" column="1" bodyfile="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" bodystart="139" bodyend="190"/>
    <listofallmembers>
      <member refid="classembed_1_1interrupt__pin_1a112a6dbbb7aa4bbbf8e1f92e41b4fce9" prot="public" virt="pure-virtual"><scope>embed::interrupt_pin</scope><name>attach_interrupt</name></member>
      <member refid="classembed_1_1interrupt__pin_1a4777e9de3417b01250bdfd1c7f96233b" prot="public" virt="pure-virtual"><scope>embed::interrupt_pin</scope><name>detach_interrupt</name></member>
      <member refid="classembed_1_1driver_1a1677362481d10c3b48544359daadf081" prot="protected" virt="pure-virtual"><scope>embed::interrupt_pin</scope><name>driver_initialize</name></member>
      <member refid="classembed_1_1driver_1a947a3487fa3acd0879e83872d9c97b01" prot="public" virt="non-virtual"><scope>embed::interrupt_pin</scope><name>initialize</name></member>
      <member refid="classembed_1_1driver_1a7e13fe8999142475da8c5b84927f03aa" prot="public" virt="non-virtual"><scope>embed::interrupt_pin</scope><name>initialized_settings</name></member>
      <member refid="classembed_1_1driver_1a346f472e8c212d09c8f45aebd0089d7b" prot="public" virt="non-virtual"><scope>embed::interrupt_pin</scope><name>is_initialized</name></member>
      <member refid="classembed_1_1interrupt__pin_1aeef4d6b6450cf1f2ed86242668343674" prot="public" virt="pure-virtual"><scope>embed::interrupt_pin</scope><name>level</name></member>
      <member refid="classembed_1_1driver_1ab8b2029f33d55b9ffffd6e88d846cd7b" prot="protected" virt="non-virtual"><scope>embed::interrupt_pin</scope><name>m_initialized</name></member>
      <member refid="classembed_1_1driver_1aac7d23e384bc27a26b77c8fd681483ef" prot="protected" virt="non-virtual"><scope>embed::interrupt_pin</scope><name>m_initialized_settings</name></member>
      <member refid="classembed_1_1driver_1afb925433a5897293609af5fae29e3dc3" prot="protected" virt="non-virtual"><scope>embed::interrupt_pin</scope><name>m_settings</name></member>
      <member refid="classembed_1_1driver_1a54440bf23c0c34102f563da1193d99ae" prot="public" virt="non-virtual"><scope>embed::interrupt_pin</scope><name>reset</name></member>
      <member refid="classembed_1_1driver_1ae6eb991ebb2321bb3565c2a03a613219" prot="public" virt="non-virtual"><scope>embed::interrupt_pin</scope><name>settings</name></member>
      <member refid="classembed_1_1interrupt__pin_1a07c33ec3b21b40346a0b765bb14627e9" prot="public" virt="non-virtual"><scope>embed::interrupt_pin</scope><name>trigger_edge</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
