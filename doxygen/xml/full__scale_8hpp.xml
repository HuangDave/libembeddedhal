<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="full__scale_8hpp" kind="file" language="C++">
    <compoundname>full_scale.hpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cinttypes</includes>
    <includes local="no">climits</includes>
    <includes local="no">concepts</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">limits</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="adc_8hpp" local="yes">/github/workspace/include/libembeddedhal/adc/adc.hpp</includedby>
    <includedby refid="dac_8hpp" local="yes">/github/workspace/include/libembeddedhal/dac/dac.hpp</includedby>
    <includedby refid="i2c_8hpp" local="yes">/github/workspace/include/libembeddedhal/i2c/i2c.hpp</includedby>
    <includedby refid="pwm_8hpp" local="yes">/github/workspace/include/libembeddedhal/pwm/pwm.hpp</includedby>
    <incdepgraph>
      <node id="7">
        <label>limits</label>
      </node>
      <node id="3">
        <label>cinttypes</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>climits</label>
      </node>
      <node id="1">
        <label>/github/workspace/include/libembeddedhal/full_scale.hpp</label>
        <link refid="full__scale_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>concepts</label>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>/github/workspace/include/libembeddedhal/i2c/i2c.hpp</label>
        <link refid="i2c_8hpp"/>
      </node>
      <node id="3">
        <label>/github/workspace/include/libembeddedhal/dac/dac.hpp</label>
        <link refid="dac_8hpp"/>
      </node>
      <node id="1">
        <label>/github/workspace/include/libembeddedhal/full_scale.hpp</label>
        <link refid="full__scale_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/github/workspace/include/libembeddedhal/adc/adc.hpp</label>
        <link refid="adc_8hpp"/>
      </node>
      <node id="5">
        <label>/github/workspace/include/libembeddedhal/pwm/pwm.hpp</label>
        <link refid="pwm_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classembed_1_1bit__limits" prot="public">embed::bit_limits</innerclass>
    <innerclass refid="structembed_1_1bit__depth" prot="public">embed::bit_depth</innerclass>
    <innerclass refid="classembed_1_1full__scale" prot="public">embed::full_scale</innerclass>
    <innernamespace refid="namespaceembed">embed</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cinttypes&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceembed" kindref="compound">embed</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">8_t<sp/>bit_w</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">th,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_t&gt;</highlight></codeline>
<codeline lineno="19" refid="classembed_1_1bit__limits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classembed_1_1bit__limits" kindref="compound">bit_limits</ref></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>int_t<sp/>is<sp/>actually<sp/>an<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_integral_v&lt;int_t&gt;,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>must<sp/>be<sp/>an<sp/>integral<sp/>type<sp/>like<sp/>int8_t,<sp/>uint16_t,<sp/>int32_t,<sp/>etc!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>bit<sp/>width<sp/>is<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>size<sp/>of<sp/>the<sp/>int_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_width<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int_t)<sp/>*<sp/>8,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>bit_width<sp/>exceed<sp/>the<sp/>number<sp/>of<sp/>bit_width<sp/>in<sp/>the<sp/>integer<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>bit<sp/>width<sp/>is<sp/>not<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>static_assert(bit_width<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>bit_width<sp/>cannot<sp/>be<sp/>0.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classembed_1_1bit__limits_1a4d0a420505e966911033bb1db25d7327" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>int_t<sp/><ref refid="classembed_1_1bit__limits_1a4d0a420505e966911033bb1db25d7327" kindref="member">max</ref>()</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(bit_width<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;int_t&gt;::max();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_signed_v&lt;int_t&gt;)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int_t<sp/><ref refid="classembed_1_1bit__limits_1a4d0a420505e966911033bb1db25d7327" kindref="member">max</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(((1ULL<sp/>&lt;&lt;<sp/>bit_width)<sp/>/<sp/>2ULL)<sp/>-<sp/>1ULL);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1bit__limits_1a4d0a420505e966911033bb1db25d7327" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int_t<sp/><ref refid="classembed_1_1bit__limits_1a4d0a420505e966911033bb1db25d7327" kindref="member">max</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((1ULL<sp/>&lt;&lt;<sp/>bit_width)<sp/>-<sp/>1ULL);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1bit__limits_1a4d0a420505e966911033bb1db25d7327" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classembed_1_1bit__limits_1a74eb8b17d9ad93285ef2d9520d504b72" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>int_t<sp/><ref refid="classembed_1_1bit__limits_1a74eb8b17d9ad93285ef2d9520d504b72" kindref="member">min</ref>()</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(bit_width<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;int_t&gt;::min();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_signed_v&lt;int_t&gt;)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int_t<sp/><ref refid="classembed_1_1bit__limits_1a74eb8b17d9ad93285ef2d9520d504b72" kindref="member">min</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(((1ULL<sp/>&lt;&lt;<sp/>bit_width)<sp/>/<sp/>2ULL)<sp/>*<sp/>-1ULL);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1bit__limits_1a74eb8b17d9ad93285ef2d9520d504b72" kindref="member">min</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0U;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_field_w</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">th&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>consteval<sp/>uint32_t<sp/>generate_field_of_ones()</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bit_field_width;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>source_w</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">th,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>increase_bit_depth(U<sp/>p_value)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>output_bit_width<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>CHAR_BIT;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disallow<sp/>anything<sp/>other<sp/>than<sp/>integral<sp/>types.<sp/>This<sp/>also<sp/>disallows<sp/>floats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>this<sp/>type<sp/>seeks<sp/>to<sp/>eliminate<sp/>their<sp/>use<sp/>as<sp/>much<sp/>as<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>static_assert(std::is_integral_v&lt;T&gt;,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Full<sp/>scale<sp/>can<sp/>only<sp/>be<sp/>an<sp/>unsigned<sp/>integral<sp/>type<sp/>.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>static_assert(output_bit_width<sp/>&gt;=<sp/>source_width,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>destination<sp/>bit<sp/>width<sp/>must<sp/>be<sp/>equal<sp/>to<sp/>or<sp/>greater<sp/>than<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>type<sp/>of<sp/>the<sp/>value<sp/>to<sp/>be<sp/>scaled<sp/>up.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>difference<sp/>between<sp/>the<sp/>destination<sp/>and<sp/>the<sp/>source<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width_difference<sp/>=<sp/>output_bit_width<sp/>-<sp/>source_width;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>final_source_width<sp/>=</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>(std::is_signed_v&lt;T&gt;)<sp/>?<sp/>source_width<sp/>-<sp/>1<sp/>:<sp/>source_width;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>final_width_difference<sp/>=</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>(std::is_signed_v&lt;T&gt;)<sp/>?<sp/>width_difference<sp/>-<sp/>1<sp/>:<sp/>width_difference;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>T<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p_value)<sp/>&lt;&lt;<sp/>width_difference;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_value<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>final_source_width;<sp/>i<sp/>&lt;<sp/>final_width_difference;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>final_source_width)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>(result<sp/>&gt;&gt;<sp/>i);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_w</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">th&gt;</highlight></codeline>
<codeline lineno="145" refid="structembed_1_1bit__depth" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structembed_1_1bit__depth" kindref="compound">bit_depth</ref></highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147" refid="structembed_1_1bit__depth_1a2520211c9434bfdc8668aca6742d7ae5" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="structembed_1_1bit__depth_1a2520211c9434bfdc8668aca6742d7ae5" kindref="member">value</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="structembed_1_1bit__depth_1aede59a50bab871ba71f29718abad6bf2" refkind="member"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="structembed_1_1bit__depth_1aede59a50bab871ba71f29718abad6bf2" kindref="member">bit_depth</ref>(T<sp/>p_value)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structembed_1_1bit__depth_1a2520211c9434bfdc8668aca6742d7ae5" kindref="member">value</ref>(p_value)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structembed_1_1bit__depth_1a2520211c9434bfdc8668aca6742d7ae5" kindref="member">value</ref><sp/>=<sp/>std::clamp(p_value,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classembed_1_1bit__limits" kindref="compound">bit_limits&lt;bit_width, T&gt;::min</ref>(),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classembed_1_1bit__limits" kindref="compound">bit_limits&lt;bit_width, T&gt;::max</ref>());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="164" refid="classembed_1_1full__scale" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classembed_1_1full__scale" kindref="compound">full_scale</ref></highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disallow<sp/>anything<sp/>other<sp/>than<sp/>integral<sp/>types.<sp/>This<sp/>also<sp/>disallows<sp/>floats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>this<sp/>type<sp/>seeks<sp/>to<sp/>eliminate<sp/>their<sp/>use<sp/>as<sp/>much<sp/>as<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>static_assert(std::is_integral_v&lt;T&gt;,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Full<sp/>scale<sp/>can<sp/>only<sp/>be<sp/>an<sp/>unsigned<sp/>integral<sp/>type<sp/>.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175" refid="classembed_1_1full__scale_1ad7c1fd9bcd334afffd3c5f779793aa5a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1full__scale_1ad7c1fd9bcd334afffd3c5f779793aa5a" kindref="member">bit_width</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>CHAR_BIT;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classembed_1_1full__scale_1ab1ae7f3a156abced5ec4bb21c6f3fe91" refkind="member"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="classembed_1_1full__scale_1ab1ae7f3a156abced5ec4bb21c6f3fe91" kindref="member">full_scale</ref>()</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_value(0)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_w</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">th&gt;</highlight></codeline>
<codeline lineno="182" refid="classembed_1_1full__scale_1ada396c0b7336f0ea809b485553254b50" refkind="member"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="classembed_1_1full__scale_1ada396c0b7336f0ea809b485553254b50" kindref="member">full_scale</ref>(<ref refid="structembed_1_1bit__depth" kindref="compound">bit_depth&lt;U, bit_width&gt;</ref><sp/>p_value)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>p_value;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_w</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">th&gt;</highlight></codeline>
<codeline lineno="188" refid="classembed_1_1full__scale_1a20d97dfafe9e6806aa6193a5c5eee02b" refkind="member"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="classembed_1_1full__scale" kindref="compound">full_scale&lt;T&gt;</ref>&amp;<sp/><ref refid="classembed_1_1full__scale_1a20d97dfafe9e6806aa6193a5c5eee02b" kindref="member">operator=</ref>(<ref refid="structembed_1_1bit__depth" kindref="compound">bit_depth&lt;U, bit_width&gt;</ref><sp/>p_value)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>increase_bit_depth&lt;T,<sp/>bit_width,<sp/>U&gt;(p_value.<ref refid="structembed_1_1bit__depth_1a2520211c9434bfdc8668aca6742d7ae5" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classembed_1_1full__scale_1a3fa551382bb4e54cecfe092afd9410a8" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classembed_1_1full__scale_1a3fa551382bb4e54cecfe092afd9410a8" kindref="member">value</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>T<sp/>m_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral<sp/>T,<sp/>std::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral<sp/>U&gt;</highlight></codeline>
<codeline lineno="210" refid="namespaceembed_1a275d9ea59b830bbabfb5cd33e3d1426d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceembed_1a275d9ea59b830bbabfb5cd33e3d1426d" kindref="member">operator*</ref>(U<sp/><ref refid="namespaceembed_1adb81fed604e4119c9318e47024eeb4b3" kindref="member">value</ref>,<sp/><ref refid="classembed_1_1full__scale" kindref="compound">full_scale&lt;T&gt;</ref><sp/>scale)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>std::uintmax_t<sp/>arith_container<sp/>=<sp/><ref refid="namespaceembed_1adb81fed604e4119c9318e47024eeb4b3" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>arith_container<sp/>=<sp/>arith_container<sp/>*<sp/>scale.<ref refid="classembed_1_1full__scale_1a3fa551382bb4e54cecfe092afd9410a8" kindref="member">value</ref>();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>arith_container<sp/>=<sp/>arith_container<sp/>/<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">U</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arith_container);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>embed</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/github/workspace/include/libembeddedhal/full_scale.hpp"/>
  </compounddef>
</doxygen>
