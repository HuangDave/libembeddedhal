<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceembed" kind="namespace" language="C++">
    <compoundname>embed</compoundname>
    <innerclass refid="classembed_1_1adc" prot="public">embed::adc</innerclass>
    <innerclass refid="structembed_1_1can__settings" prot="public">embed::can_settings</innerclass>
    <innerclass refid="classembed_1_1can" prot="public">embed::can</innerclass>
    <innerclass refid="classembed_1_1can__network" prot="public">embed::can_network</innerclass>
    <innerclass refid="classembed_1_1counter" prot="public">embed::counter</innerclass>
    <innerclass refid="classembed_1_1dac" prot="public">embed::dac</innerclass>
    <innerclass refid="structembed_1_1invalid__option__t" prot="public">embed::invalid_option_t</innerclass>
    <innerclass refid="structembed_1_1no__settings" prot="public">embed::no_settings</innerclass>
    <innerclass refid="classembed_1_1driver" prot="public">embed::driver</innerclass>
    <innerclass refid="classembed_1_1bit__limits" prot="public">embed::bit_limits</innerclass>
    <innerclass refid="structembed_1_1bit__depth" prot="public">embed::bit_depth</innerclass>
    <innerclass refid="classembed_1_1full__scale" prot="public">embed::full_scale</innerclass>
    <innerclass refid="structembed_1_1input__pin__settings" prot="public">embed::input_pin_settings</innerclass>
    <innerclass refid="structembed_1_1output__pin__settings" prot="public">embed::output_pin_settings</innerclass>
    <innerclass refid="structembed_1_1interrupt__pin__settings" prot="public">embed::interrupt_pin_settings</innerclass>
    <innerclass refid="classembed_1_1input__pin" prot="public">embed::input_pin</innerclass>
    <innerclass refid="classembed_1_1output__pin" prot="public">embed::output_pin</innerclass>
    <innerclass refid="classembed_1_1interrupt__pin" prot="public">embed::interrupt_pin</innerclass>
    <innerclass refid="structembed_1_1i2c__settings" prot="public">embed::i2c_settings</innerclass>
    <innerclass refid="classembed_1_1i2c" prot="public">embed::i2c</innerclass>
    <innerclass refid="classembed_1_1pwm" prot="public">embed::pwm</innerclass>
    <innerclass refid="structembed_1_1serial__settings" prot="public">embed::serial_settings</innerclass>
    <innerclass refid="classembed_1_1serial" prot="public">embed::serial</innerclass>
    <innerclass refid="structembed_1_1spi__settings" prot="public">embed::spi_settings</innerclass>
    <innerclass refid="classembed_1_1spi" prot="public">embed::spi</innerclass>
    <innerclass refid="classembed_1_1static__callable" prot="public">embed::static_callable</innerclass>
    <innerclass refid="classembed_1_1static__callable_3_01owner__class_00_01reference__designator_00_01return__t_07args__t_8_8_8_08_4" prot="public">embed::static_callable&lt; owner_class, reference_designator, return_t(args_t...)&gt;</innerclass>
    <innerclass refid="classembed_1_1static__memory__resource" prot="public">embed::static_memory_resource</innerclass>
    <innerclass refid="classembed_1_1timer" prot="public">embed::timer</innerclass>
    <innernamespace refid="namespaceembed_1_1this__thread">embed::this_thread</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceembed_1a5ab6b9e7ccdd68ae6b998c8b586a75a6" prot="public" static="no" strong="yes">
        <type></type>
        <name>pin_resistor</name>
        <enumvalue id="namespaceembed_1a5ab6b9e7ccdd68ae6b998c8b586a75a6a334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No pull up. This will cause the pin to float. This may be desirable if the pin has an external resistor attached or if the signal is sensitive to external devices like resistors. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceembed_1a5ab6b9e7ccdd68ae6b998c8b586a75a6a6bd95a5bd1a571a29b57aa0dfda9d77b" prot="public">
          <name>pull_down</name>
          <briefdescription>
<para>Pull the pin down to devices GND. This will ensure that the voltage read by the pin when there is no signal on the pin is LOW (or false). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceembed_1a5ab6b9e7ccdd68ae6b998c8b586a75a6a5dd40e1f7d5c287d1df85dac013c1c38" prot="public">
          <name>pull_up</name>
          <briefdescription>
<para>See pull down explanation, but in this case the pin is pulled up to VCC, also called VDD on some systems. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Set of possible pin mode resistor settings. See each enumeration to get more details about when and how these should be used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" line="13" column="1" bodyfile="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" bodystart="14" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceembed_1a0c3a3fccb52284cef1b912f6c2c4c5cc" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr const std::string_view</type>
        <definition>constexpr const std::string_view embed::platform_string</definition>
        <argsstring></argsstring>
        <name>platform_string</name>
        <initializer>= <ref refid="context_8hpp_1a786d51023bf2ededed548bb861d49aa9" kindref="member">PLATFORM_STRING</ref></initializer>
        <briefdescription>
<para>The platform string determines which platform this application was built for. Use this to determine at compile or runtime if the running application is a &quot;test&quot;, an &quot;lpc40&quot; series mcu, and &quot;stm&quot; series mcu or a raspberry pi (&quot;rpi&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/context.hpp" line="22" column="34" bodyfile="/github/workspace/include/libembeddedhal/context.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceembed_1a987ef4ed606ec89c1e19cce294309efe" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>auto...</type>
            <declname>options</declname>
            <defname>options</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool embed::invalid_option</definition>
        <argsstring></argsstring>
        <name>invalid_option</name>
        <initializer>= <ref refid="structembed_1_1invalid__option__t" kindref="compound">invalid_option_t</ref>&lt;options...&gt;::<ref refid="namespaceembed_1adb81fed604e4119c9318e47024eeb4b3" kindref="member">value</ref></initializer>
        <briefdescription>
<para>Helper definition to simplify the usage of <ref refid="structembed_1_1invalid__option__t" kindref="compound">invalid_option_t</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>ignored by the application but needed to create a non-trivial specialization of this class which allows its usage in static_assert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/driver.hpp" line="26" column="23" bodyfile="/github/workspace/include/libembeddedhal/driver.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceembed_1aea8ad233b7538689ad6f63d629743222" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool embed::is_platform</definition>
        <argsstring>(std::string_view p_platform)</argsstring>
        <name>is_platform</name>
        <param>
          <type>std::string_view</type>
          <declname>p_platform</declname>
        </param>
        <briefdescription>
<para>Determines if the current application was built for a specific platform. For example: </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespaceembed_1aea8ad233b7538689ad6f63d629743222" kindref="member">embed::is_platform</ref>(&quot;lpc4078&quot;);</para>
<para>Will return true if the PLATFORM macro defined at compile time was equal to lpc4078. If the developer wants to be less specific, let say, to just determine if the platform is in the lpc40xx family then the following example will work.</para>
<para><ref refid="namespaceembed_1aea8ad233b7538689ad6f63d629743222" kindref="member">embed::is_platform</ref>(&quot;lpc40&quot;);</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_platform</parametername>
</parameternamelist>
<parameterdescription>
<para>platform string pattern to check against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true matches the platform string </para>
</simplesect>
<simplesect kind="return"><para>false does not matches the platform string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/context.hpp" line="41" column="16" bodyfile="/github/workspace/include/libembeddedhal/context.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceembed_1a34fb9ef716de27d60ec74784b0a16307" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool embed::is_a_test</definition>
        <argsstring>()</argsstring>
        <name>is_a_test</name>
        <briefdescription>
<para>Determines if the application is a test. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true this application is a test </para>
</simplesect>
<simplesect kind="return"><para>false this application is not a test </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/context.hpp" line="52" column="16" bodyfile="/github/workspace/include/libembeddedhal/context.hpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceembed_1adb81fed604e4119c9318e47024eeb4b3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename enum_type</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto embed::value</definition>
        <argsstring>(enum_type enum_value)</argsstring>
        <name>value</name>
        <param>
          <type>enum_type</type>
          <declname>enum_value</declname>
        </param>
        <briefdescription>
<para>Helper function to convert an enum to its integral value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>enum_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying type of the enumeration. Do not supply this value, it is inferred by the enum_value passed to the function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enum_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the enumeration you want to convert into an integral value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr auto return the integral value of the enum. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/enum.hpp" line="13" column="16" bodyfile="/github/workspace/include/libembeddedhal/enum.hpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceembed_1a0a3fb60ed53706e6ff6f7bd57406eef9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>bit_field_width</declname>
            <defname>bit_field_width</defname>
          </param>
        </templateparamlist>
        <type>consteval uint32_t</type>
        <definition>static consteval uint32_t embed::generate_field_of_ones</definition>
        <argsstring>()</argsstring>
        <name>generate_field_of_ones</name>
        <briefdescription>
<para>Generate a mask of 1s at compiletime. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>bit_field_width</parametername>
</parameternamelist>
<parameterdescription>
<para>number of 1s in the mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>consteval uint32_t mask with 1s at the LSB </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/full_scale.hpp" line="86" column="27" bodyfile="/github/workspace/include/libembeddedhal/full_scale.hpp" bodystart="86" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceembed_1af2520d12e7e5c618488100c2b5035391" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>source_width</declname>
            <defname>source_width</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr static T</type>
        <definition>constexpr static T embed::increase_bit_depth</definition>
        <argsstring>(U p_value)</argsstring>
        <name>increase_bit_depth</name>
        <param>
          <type>U</type>
          <declname>p_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_width</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr T </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/full_scale.hpp" line="105" column="20" bodyfile="/github/workspace/include/libembeddedhal/full_scale.hpp" bodystart="105" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceembed_1a275d9ea59b830bbabfb5cd33e3d1426d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>std::unsigned_integral</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto embed::operator*</definition>
        <argsstring>(U value, full_scale&lt; T &gt; scale)</argsstring>
        <name>operator*</name>
        <param>
          <type>U</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classembed_1_1full__scale" kindref="compound">full_scale</ref>&lt; T &gt;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/full_scale.hpp" line="210" column="6" bodyfile="/github/workspace/include/libembeddedhal/full_scale.hpp" bodystart="210" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/github/workspace/include/libembeddedhal/adc/adc.hpp" line="8" column="1"/>
  </compounddef>
</doxygen>
