<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="can__network_8hpp" kind="file" language="C++">
    <compoundname>can_network.hpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">atomic</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">memory_resource</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">utility</includes>
    <includes local="yes">../can.hpp</includes>
    <includes refid="driver_8hpp" local="yes">../driver.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>atomic</label>
      </node>
      <node id="9">
        <label>../driver.hpp</label>
        <link refid="driver_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="1">
        <label>/github/workspace/include/libembeddedhal/can/can_network.hpp</label>
        <link refid="can__network_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory_resource</label>
      </node>
      <node id="8">
        <label>../can.hpp</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="10">
        <label>enum.hpp</label>
        <link refid="enum_8hpp"/>
      </node>
      <node id="6">
        <label>unordered_map</label>
      </node>
      <node id="11">
        <label>type_traits</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innerclass refid="classembed_1_1can__network" prot="public">embed::can_network</innerclass>
    <innerclass refid="classembed_1_1can__network_1_1node__t" prot="public">embed::can_network::node_t</innerclass>
    <innernamespace refid="namespaceembed">embed</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory_resource&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../can.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../driver.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceembed" kindref="compound">embed</ref><sp/>{</highlight></codeline>
<codeline lineno="15" refid="classembed_1_1can__network" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classembed_1_1can__network" kindref="compound">can_network</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1driver" kindref="compound">embed::driver</ref>&lt;&gt;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30" refid="classembed_1_1can__network_1_1node__t" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classembed_1_1can__network_1_1node__t" kindref="compound">node_t</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34" refid="classembed_1_1can__network_1_1node__t_1a8b2c7f9f34d8fbe65526b245c21bb5c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classembed_1_1can__network_1_1node__t_1a8b2c7f9f34d8fbe65526b245c21bb5c9" kindref="member">node_t</ref>()<sp/>noexcept<sp/>{}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classembed_1_1can__network_1_1node__t_1ad1fe9561adf224ed08073cbedd46f233" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classembed_1_1can__network_1_1node__t" kindref="compound">node_t</ref>&amp;<sp/><ref refid="classembed_1_1can__network_1_1node__t_1ad1fe9561adf224ed08073cbedd46f233" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1can__network_1_1node__t" kindref="compound">node_t</ref>&amp;<sp/>node)<sp/>noexcept</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>node.data;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>access_counter.store(access_counter.load());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classembed_1_1can__network_1_1node__t_1ab2ca030b6309e21d47f2295a3e15f697" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classembed_1_1can__network_1_1node__t_1ab2ca030b6309e21d47f2295a3e15f697" kindref="member">node_t</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1can__network_1_1node__t" kindref="compound">node_t</ref>&amp;<sp/>node)<sp/>noexcept<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>node;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classembed_1_1can__network_1_1node__t_1ad412ab57392b6b8a722d921b8c5980b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structembed_1_1can_1_1message__t" kindref="compound">can::message_t</ref><sp/><ref refid="classembed_1_1can__network_1_1node__t_1ad412ab57392b6b8a722d921b8c5980b9" kindref="member">secure_get</ref>()</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continuously<sp/>check<sp/>if<sp/>the<sp/>received<sp/>CAN<sp/>message<sp/>is<sp/>valid.<sp/>NOTE:<sp/>that,<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>general,<sp/>the<sp/>looping<sp/>logic<sp/>for<sp/>this<sp/>function<sp/>almost<sp/>never<sp/>occurs<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copies<sp/>from<sp/>RAM/cache<sp/>are<sp/>fast<sp/>between<sp/>receive_handler<sp/>and<sp/>GetMessage()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>atomically<sp/>copy<sp/>the<sp/>access_counter<sp/>to<sp/>a<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>read_message_start<sp/>=<sp/>access_counter.load();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>mesage<sp/>into<sp/>the<sp/>kCanMessage<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structembed_1_1can_1_1message__t" kindref="compound">can::message_t</ref><sp/>kCanMessage<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>atomically<sp/>copy<sp/>the<sp/>access_counter<sp/>again<sp/>such<sp/>that<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>between<sp/>the<sp/>start<sp/>and<sp/>finish<sp/>can<sp/>be<sp/>compared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>read_message_finish<sp/>=<sp/>access_counter.load();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>and<sp/>only<sp/>if<sp/>these<sp/>two<sp/>values<sp/>are<sp/>the<sp/>same,<sp/>meaning<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>receive_handler<sp/>isn&apos;t<sp/>currently<sp/>modifying<sp/>the<sp/>node_t&apos;s<sp/>data,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>the<sp/>message<sp/>be<sp/>considered<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_message_start<sp/>==<sp/>read_message_finish)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kCanMessage;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1can__network" kindref="compound">can_network</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structembed_1_1can_1_1message__t" kindref="compound">can::message_t</ref>&amp;<sp/>new_data)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Atomic<sp/>increment<sp/>of<sp/>the<sp/>access<sp/>counter<sp/>to<sp/>notify<sp/>any<sp/>threads<sp/>that<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>GetMesage()<sp/>that<sp/>the<sp/>value<sp/>of<sp/>this<sp/>node<sp/>is<sp/>changing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>access_counter++;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>new<sp/>message<sp/>into<sp/>the<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>new_data;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Another<sp/>atomic<sp/>increment<sp/>of<sp/>the<sp/>access<sp/>counter<sp/>to<sp/>notify<sp/>any<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>GetMessage()<sp/>that<sp/>the<sp/>value<sp/>of<sp/>this<sp/>node<sp/>has<sp/>finished<sp/>changing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>GetMessage<sp/>to<sp/>be<sp/>valid,<sp/>the<sp/>function<sp/>must<sp/>save<sp/>the<sp/>access_counter,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>message<sp/>data,<sp/>then<sp/>check<sp/>the<sp/>access_counter<sp/>again<sp/>to<sp/>make<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>has<sp/>not<sp/>changed.<sp/>If<sp/>it<sp/>has<sp/>changed,<sp/>then<sp/>GetMessage()<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continue<sp/>polling<sp/>the<sp/>map<sp/>node<sp/>until<sp/>access_counter<sp/>is<sp/>the<sp/>same<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>access_counter++;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structembed_1_1can_1_1message__t" kindref="compound">can::message_t</ref><sp/>data<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic&lt;int&gt;<sp/>access_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classembed_1_1can__network_1ab753d9f66866c86c81acb75558d6f105" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classembed_1_1can__network_1ab753d9f66866c86c81acb75558d6f105" kindref="member">can_network</ref>(<ref refid="classembed_1_1can" kindref="compound">can</ref>&amp;<sp/>p_can,<sp/>std::pmr::memory_resource&amp;<sp/>p_memory_resource)<sp/>noexcept</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_can(p_can)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_messages(&amp;p_memory_resource)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classembed_1_1can__network_1a252f3734fb6b491f71285e998f73ddd9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1can__network_1a252f3734fb6b491f71285e998f73ddd9" kindref="member">driver_initialize</ref>()</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="118"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_can.<ref refid="classembed_1_1driver_1a947a3487fa3acd0879e83872d9c97b01" kindref="member">initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>m_can.<ref refid="classembed_1_1can_1a996fd4b52acd90ef05b5972c3e2a3fff" kindref="member">attach_interrupt</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classembed_1_1can" kindref="compound">can</ref>&amp;<sp/>p_can)<sp/>{<sp/>receive_handler(p_can);<sp/>});</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classembed_1_1can__network_1abbc1679f4d5b8e0359badb6e746bad9c" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/><ref refid="classembed_1_1can__network_1_1node__t" kindref="compound">node_t</ref>*<sp/><ref refid="classembed_1_1can__network_1abbc1679f4d5b8e0359badb6e746bad9c" kindref="member">register_message_id</ref>(<ref refid="classembed_1_1can_1a526ae12b76dffd3dda0891247da12b55" kindref="member">can::id_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classembed_1_1can__network_1_1node__t" kindref="compound">node_t</ref><sp/>empty_node;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>an<sp/>empty<sp/>node_t<sp/>into<sp/>the<sp/>map<sp/>with<sp/>the<sp/>following<sp/>ID<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>key.<sp/>This<sp/>is<sp/>how<sp/>each<sp/>ID<sp/>is<sp/>remembered<sp/>when<sp/>calls<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>receive_handler()<sp/>and<sp/>GetMessage()<sp/>are<sp/>performed.<sp/>receive_handler()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>ignore<sp/>messages<sp/>with<sp/>IDs<sp/>that<sp/>are<sp/>not<sp/>already<sp/>keys<sp/>within<sp/>the<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GetMessage()<sp/>will<sp/>throw<sp/>an<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>m_messages.emplace(std::make_pair(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>empty_node));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>reference<sp/>to<sp/>the<sp/>newly<sp/>made<sp/>node_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;m_messages[id];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classembed_1_1can__network_1af65e894f1ad841bbec996020ab83a9f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classembed_1_1can__network_1af65e894f1ad841bbec996020ab83a9f9" kindref="member">manually_call_receive_handler</ref>()<sp/>{<sp/>receive_handler(m_can);<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classembed_1_1can__network_1a8a88151b0137da5fe3e09e99992568d0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classembed_1_1can" kindref="compound">can</ref>&amp;<sp/><ref refid="classembed_1_1can__network_1a8a88151b0137da5fe3e09e99992568d0" kindref="member">bus</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_can;<sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classembed_1_1can__network_1aaab256f31f0435d1277292d54a0aaa44" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classembed_1_1can__network_1aaab256f31f0435d1277292d54a0aaa44" kindref="member">GetInternalMap</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_messages;<sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>receive_handler(<ref refid="classembed_1_1can" kindref="compound">can</ref>&amp;<sp/>p_can)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>isn&apos;t<sp/>any<sp/>data<sp/>available,<sp/>return<sp/>early.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_can.<ref refid="classembed_1_1can_1a253e7c87a6a5438adefc991a861232b2" kindref="member">has_data</ref>())<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pop<sp/>the<sp/>latest<sp/>can<sp/>message<sp/>off<sp/>the<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kMessage<sp/>=<sp/>p_can.<ref refid="classembed_1_1can_1a60b406a9a7689761e6481f451a1bc277" kindref="member">receive</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>map<sp/>already<sp/>has<sp/>a<sp/>value<sp/>for<sp/>this<sp/>ID.<sp/>This<sp/>acts<sp/>as<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stage<sp/>of<sp/>the<sp/>CAN<sp/>filter<sp/>for<sp/>the<sp/>CANBUS<sp/>Network<sp/>module.<sp/>If<sp/>the<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>does<sp/>NOT<sp/>exist<sp/>in<sp/>the<sp/>map,<sp/>then<sp/>this<sp/>message<sp/>will<sp/>not<sp/>be<sp/>saved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typically,<sp/>this<sp/>only<sp/>happens<sp/>when<sp/>the<sp/>hardware<sp/>filter<sp/>has<sp/>not<sp/>been<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>properly<sp/>to<sp/>eliminate<sp/>CAN<sp/>messages<sp/>that<sp/>should<sp/>be<sp/>ignored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>lookups<sp/>can<sp/>be<sp/>costly,<sp/>especially<sp/>in<sp/>a<sp/>interrupt<sp/>context,<sp/>so<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>needing<sp/>to<sp/>hash/lookup<sp/>the<sp/>ID<sp/>once<sp/>is<sp/>preferred.<sp/>To<sp/>prevent<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lookups,<sp/>an<sp/>iterator<sp/>is<sp/>stored<sp/>into<sp/>the<sp/>message_node<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>message_node<sp/>=<sp/>m_messages.find(kMessage.id);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>ID<sp/>has<sp/>an<sp/>associated<sp/>value<sp/>in<sp/>the<sp/>map,<sp/>then<sp/>the<sp/>node<sp/>std::pair&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>returned,<sp/>otherwise,<sp/>the<sp/>::end()<sp/>node<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message_node<sp/>!=<sp/>m_messages.end())<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message_node-&gt;second.update(kMessage);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>can&amp;<sp/>m_can;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>std::pmr::unordered_map&lt;uint32_t,<sp/>node_t&gt;<sp/>m_messages;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">};</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>embed</highlight></codeline>
    </programlisting>
    <location file="/github/workspace/include/libembeddedhal/can/can_network.hpp"/>
  </compounddef>
</doxygen>
