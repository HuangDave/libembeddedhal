<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceembed_1_1this__thread" kind="namespace" language="C++">
    <compoundname>embed::this_thread</compoundname>
    <innerclass refid="structembed_1_1this__thread_1_1global__clocks" prot="public">embed::this_thread::global_clocks</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceembed_1_1this__thread_1a52242a600cd579fd6ca97984718813da" prot="public" static="no">
        <type>std::chrono::nanoseconds</type>
        <definition>using embed::this_thread::time_increment = typedef std::chrono::nanoseconds</definition>
        <argsstring></argsstring>
        <name>time_increment</name>
        <briefdescription>
<para>smallest increment of time for clocks </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/clock/clock.hpp" line="11" column="1" bodyfile="/github/workspace/include/libembeddedhal/clock/clock.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceembed_1_1this__thread_1a6cce4592820502535c418e4920890a8a" prot="public" static="no">
        <type>std::function&lt; void(std::chrono::nanoseconds)&gt;</type>
        <definition>using embed::this_thread::sleep_function = typedef std::function&lt;void(std::chrono::nanoseconds)&gt;</definition>
        <argsstring></argsstring>
        <name>sleep_function</name>
        <briefdescription>
<para>definition of a sleep function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/clock/clock.hpp" line="16" column="1" bodyfile="/github/workspace/include/libembeddedhal/clock/clock.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceembed_1_1this__thread_1a8c5134d64bfe076ffeab36051bc6274c" prot="public" static="no">
        <type>std::function&lt; std::chrono::nanoseconds(void)&gt;</type>
        <definition>using embed::this_thread::uptime_function = typedef std::function&lt;std::chrono::nanoseconds(void)&gt;</definition>
        <argsstring></argsstring>
        <name>uptime_function</name>
        <briefdescription>
<para>definition of an uptime function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/clock/clock.hpp" line="21" column="1" bodyfile="/github/workspace/include/libembeddedhal/clock/clock.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceembed_1_1this__thread_1a6c18d64dfb85828b9e8981141451f864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto embed::this_thread::sleep_for</definition>
        <argsstring>(time_increment delay)</argsstring>
        <name>sleep_for</name>
        <param>
          <type><ref refid="namespaceembed_1_1this__thread_1a52242a600cd579fd6ca97984718813da" kindref="member">time_increment</ref></type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Delay execution of the program by a predefined time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of time to delay execution by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/clock/clock.hpp" line="69" column="13" bodyfile="/github/workspace/include/libembeddedhal/clock/clock.hpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceembed_1_1this__thread_1a8d098e7d833c133fc5bd1acf14f88f4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>static auto embed::this_thread::uptime</definition>
        <argsstring>()</argsstring>
        <name>uptime</name>
        <briefdescription>
<para>Get the current system uptime. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>auto the global uptime </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/clock/clock.hpp" line="78" column="13" bodyfile="/github/workspace/include/libembeddedhal/clock/clock.hpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceembed_1_1this__thread_1ade54eb516836eec3ddc20487ea69dded" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void embed::this_thread::set_global_sleep</definition>
        <argsstring>(sleep_function sleep_function)</argsstring>
        <name>set_global_sleep</name>
        <param>
          <type><ref refid="namespaceembed_1_1this__thread_1a6cce4592820502535c418e4920890a8a" kindref="member">sleep_function</ref></type>
          <declname>sleep_function</declname>
        </param>
        <briefdescription>
<para>Set the global sleep object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sleep_function</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to handle sleeping </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/clock/clock.hpp" line="88" column="13" bodyfile="/github/workspace/include/libembeddedhal/clock/clock.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceembed_1_1this__thread_1aad65a79dbc6b91e0277fc0fa7b5b7e09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void embed::this_thread::set_global_uptime</definition>
        <argsstring>(uptime_function uptime_function)</argsstring>
        <name>set_global_uptime</name>
        <param>
          <type><ref refid="namespaceembed_1_1this__thread_1a8c5134d64bfe076ffeab36051bc6274c" kindref="member">uptime_function</ref></type>
          <declname>uptime_function</declname>
        </param>
        <briefdescription>
<para>Set the global uptime object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uptime_function</parametername>
</parameternamelist>
<parameterdescription>
<para>the function to return the current system uptime </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/clock/clock.hpp" line="97" column="13" bodyfile="/github/workspace/include/libembeddedhal/clock/clock.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/github/workspace/include/libembeddedhal/clock/clock.hpp" line="6" column="1"/>
  </compounddef>
</doxygen>
