<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classembed_1_1output__pin" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>embed::output_pin</compoundname>
    <basecompoundref refid="classembed_1_1driver" prot="public" virt="non-virtual">embed::driver&lt; output_pin_settings &gt;</basecompoundref>
    <includes refid="gpio_8hpp" local="no">gpio.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classembed_1_1output__pin_1aa4d619e5385e9e6a35b63a4dcec9b423" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void embed::output_pin::level</definition>
        <argsstring>(bool p_high)=0</argsstring>
        <name>level</name>
        <param>
          <type>bool</type>
          <declname>p_high</declname>
        </param>
        <briefdescription>
<para>Set the state of the pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_high</parametername>
</parameternamelist>
<parameterdescription>
<para>if true then the pin state is set to HIGH voltage. If false, the pin state is set to LOW voltage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" line="120" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classembed_1_1output__pin_1a41cf159eb61943c234889a2996bad81e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool embed::output_pin::level</definition>
        <argsstring>() const =0</argsstring>
        <name>level</name>
        <briefdescription>
<para>Read the state of the input pin. Implementations must read the pin state from hardware and will not simply cache the results from running <ref refid="classembed_1_1output__pin_1aa4d619e5385e9e6a35b63a4dcec9b423" kindref="member">level(bool)</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true indicates a HIGH voltage </para>
</simplesect>
<simplesect kind="return"><para>false indicates a LOW voltage </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" line="129" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Digital output pin hardware abstraction. Use this to drive a pin HIGH or LOW in order to send a control signal or turn off or on an LED. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>embed::driver&lt; output_pin_settings &gt;</label>
        <link refid="classembed_1_1driver"/>
      </node>
      <node id="1">
        <label>embed::output_pin</label>
        <link refid="classembed_1_1output__pin"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>embed::driver&lt; output_pin_settings &gt;</label>
        <link refid="classembed_1_1driver"/>
      </node>
      <node id="1">
        <label>embed::output_pin</label>
        <link refid="classembed_1_1output__pin"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" line="111" column="1" bodyfile="/github/workspace/include/libembeddedhal/gpio/gpio.hpp" bodystart="112" bodyend="130"/>
    <listofallmembers>
      <member refid="classembed_1_1driver_1a1677362481d10c3b48544359daadf081" prot="protected" virt="pure-virtual"><scope>embed::output_pin</scope><name>driver_initialize</name></member>
      <member refid="classembed_1_1driver_1a947a3487fa3acd0879e83872d9c97b01" prot="public" virt="non-virtual"><scope>embed::output_pin</scope><name>initialize</name></member>
      <member refid="classembed_1_1driver_1a7e13fe8999142475da8c5b84927f03aa" prot="public" virt="non-virtual"><scope>embed::output_pin</scope><name>initialized_settings</name></member>
      <member refid="classembed_1_1driver_1a346f472e8c212d09c8f45aebd0089d7b" prot="public" virt="non-virtual"><scope>embed::output_pin</scope><name>is_initialized</name></member>
      <member refid="classembed_1_1output__pin_1aa4d619e5385e9e6a35b63a4dcec9b423" prot="public" virt="pure-virtual"><scope>embed::output_pin</scope><name>level</name></member>
      <member refid="classembed_1_1output__pin_1a41cf159eb61943c234889a2996bad81e" prot="public" virt="pure-virtual"><scope>embed::output_pin</scope><name>level</name></member>
      <member refid="classembed_1_1driver_1ab8b2029f33d55b9ffffd6e88d846cd7b" prot="protected" virt="non-virtual"><scope>embed::output_pin</scope><name>m_initialized</name></member>
      <member refid="classembed_1_1driver_1aac7d23e384bc27a26b77c8fd681483ef" prot="protected" virt="non-virtual"><scope>embed::output_pin</scope><name>m_initialized_settings</name></member>
      <member refid="classembed_1_1driver_1afb925433a5897293609af5fae29e3dc3" prot="protected" virt="non-virtual"><scope>embed::output_pin</scope><name>m_settings</name></member>
      <member refid="classembed_1_1driver_1a54440bf23c0c34102f563da1193d99ae" prot="public" virt="non-virtual"><scope>embed::output_pin</scope><name>reset</name></member>
      <member refid="classembed_1_1driver_1ae6eb991ebb2321bb3565c2a03a613219" prot="public" virt="non-virtual"><scope>embed::output_pin</scope><name>settings</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
