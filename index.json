[{"content":"Quick Start Prerequisites Lorem Ipsum.\n","description":"","tags":null,"title":"Basics","uri":"/libembeddedhal/basics/"},{"content":"Welcome to libembeddedhal! TBD\n","description":"","tags":null,"title":"Welcome","uri":"/libembeddedhal/"},{"content":"Testing this out Some content for you!\n","description":"","tags":null,"title":"First Content","uri":"/libembeddedhal/basics/first-content/"},{"content":"","description":"","tags":null,"title":"Apis","uri":"/libembeddedhal/api/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/libembeddedhal/categories/"},{"content":" namespace embed  class adc Analog to Digital Converter (ADC) hardware abstraction interface. class bit_depth A type based on bit width that contains a value. class bit_limits class can Controller Area Network (CAN bus) hardware abstraction interface.  struct message_t Attributes of a can message.   class can_network can_network is a canbus message receiver handler and  class node_t A can network node stores the can messages in a lock free way.   struct can_settings Generic settings for a can peripheral. class counter Counter hardware abstraction interface. Use this interface for devices and peripherals that have counting capabilities. Such devices can count up or down. Useful for keeping time. Expect counters to overflow when they reach the end of counting register’s limits. class dac Digital to Analog Converter (DAC) hardware abstraction interface. class driver The basis class for all peripheral, device and system drivers in libembeddedhal. class full_scale A bit resolution erased representation of a precentage value using only integral arithmetic. class i2c Inter-integrated Circuit (I2C) or Two Wire Interface (TWI) communication protocol hardware abstract interface. struct i2c_settings Generic settings for a standard I2C device. class input_pin Digital input pin hardware abstraction. struct input_pin_settings Generic settings for input pins. class interrupt_pin Digital interrupt pin hardware abstraction. struct interrupt_pin_settings Generic settings for interrupt pins. struct invalid_option_t Used for defining static_asserts that should always fail, but only if the static_assert line is hit via if constexpr control block. Prefer to NOT use this directly but to use invalid_option instead. struct no_settings An empty settings structure used to indicate that a driver or interface does not have generic settings. class output_pin Digital output pin hardware abstraction. struct output_pin_settings Generic settings for output pins. class pwm Pulse Width Modulation (PWM) channel hardware abstraction. class serial Serial communication protocol hardware abstract interface. struct serial_settings Generic settings for a standard serial device. class spi Serial peripheral interface (SPI) communication protocol hardware abstract interface. struct spi_settings Generic settings for a standard SPI device. class static_callable General class which will be used to allow for signature to be used and then split by the below class. class static_callable\u003c owner_class, reference_designator, return_t(args_t…)\u003e Specialization of static_callable with the return type and arguments split up. class static_memory_resource The static_memory_resource is the polymorphic memory resource allocator that allows libembeddedhal’s libraries to use a C++ standard container such as std::pmr::vector, std::pmr::string, std::pmr::unordered_map, and more without requiring dynamic memory allocation from the heap. It provides a simple way to create an allocator with built in storage, with its size indicated by a single template parameter. It also provides statistics regarding the amount of memory allocated such that developers can determine if they need to reduce or increase the size of the buffer. Memory statistics can also give programs the insight into how much memory space is available and make decisions based on that. In the event that the memory of the static allocator is exceeded, a std::bad_alloc excpetion is thrown. namespace this_thread  struct global_clocks structure containing internal clock variables and functions   class timer Timer hardware abstraction interface.     Updated on 2021-12-04 at 22:03:02 +0000\n","description":"","tags":null,"title":"Classes","uri":"/libembeddedhal/api/classes/"},{"content":" Updated on 2021-12-04 at 22:03:02 +0000\n","description":"","tags":null,"title":"Modules","uri":"/libembeddedhal/api/modules/"},{"content":" Updated on 2021-12-04 at 22:03:02 +0000\n","description":"","tags":null,"title":"Pages","uri":"/libembeddedhal/api/pages/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/libembeddedhal/tags/"}]